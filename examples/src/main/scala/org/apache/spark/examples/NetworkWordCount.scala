/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// scalastyle:off println
package org.apache.spark.examples

import org.apache.spark.SparkConf
import org.apache.spark.streaming.{Seconds, StreamingContext}
import org.apache.spark.storage.StorageLevel

/**
  * Counts words in UTF8 encoded, '\n' delimited text received from the network every second.
  * 单词统计UTF8编码,每一秒从网络中接收到的分隔的文本
  * Usage: NetworkWordCount <hostname> <port>
  * <hostname> and <port> describe the TCP server that Spark Streaming would connect to receive data.
  * 描述:Spark流将接收数据的TCP服务器
  *
  * To run this on your local machine, you need to first run a Netcat server
  * 运行在本地机器上,你需要先运行一个netcat服务器
  *    `$ nc -lk 9999`
  * and then run the example
  *    `$ bin/run-example org.apache.spark.examples.streaming.NetworkWordCount localhost 9999`
  */
object NetworkWordCount {
  def main(args: Array[String]) {
    /** if (args.length < 2) {
      System.err.println("Usage: NetworkWordCount <hostname> <port>")
      System.exit(1)
    }
      **/

    //StreamingExamples.setStreamingLogLevels()

    // Create the context with a 1 second batch size
    //创建上下文一个1秒批量大小
    val sparkConf = new SparkConf().setMaster("local").setAppName("NetworkWordCount")
    val ssc = new StreamingContext(sparkConf, Seconds(1))

    // Create a socket stream on target ip:port and count the
    // words in input stream of \n delimited text (eg. generated by 'nc')
    //在目标IP上创建一个套接字流:端口,并在“n”分隔的文本的输入流中计数单词
    // Note that no duplication in storage level only for running locally.
    //请注意,只有在本地运行的存储级别没有重复
    // Replication necessary in distributed scenario for fault tolerance.
    //分布式容错中必要的复制
    val lines = ssc.socketTextStream("192.168.0.39", 8088, StorageLevel.MEMORY_AND_DISK_SER)
    val words = lines.flatMap(_.split(" "))//以空格分隔
    //println(">>>>>>>>>>>>>>."+words)
    val wordCounts = words.map(x => (x, 1)).reduceByKey(_ + _)//单词计数
    wordCounts.print()
    ssc.start()
    ssc.awaitTermination()
  }
}
// scalastyle:on println